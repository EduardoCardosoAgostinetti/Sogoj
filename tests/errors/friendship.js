const axios = require('axios');
const baseUrl = 'http://localhost:3000';

const users = [
    {
        username: 'admin1',
        email: 'admin1@example.com',
        password: 'password123',
        token: null,
        id: null
    },
    {
        username: 'mod2',
        email: 'mod2@example.com',
        password: 'password123',
        token: null,
        id: null
    },
];

async function loginUsers() {
    for (const user of users) {
        try {
            const res = await axios.post(`${baseUrl}/users/login`, {
                username: user.username,
                password: user.password,
            });
            const content = res.data.data.content;
            user.token = content.token;
            user.id = content.user.id;
            console.log(`‚úÖ Logado: ${user.username}`);
        } catch (err) {
            console.error(`‚ùå Erro login ${user.username}:`, err.response?.data || err.message);
        }
    }
}

async function runErrorTests() {
    await loginUsers();

    const [admin, mod] = users;

    console.log('\nüö´ TESTES DE ERRO NAS ROTAS DE AMIZADE\n');

    // 1Ô∏è‚É£ Enviar solicita√ß√£o para si mesmo
    try {
        console.log('1Ô∏è‚É£ Enviar solicita√ß√£o para si mesmo...');
        await axios.post(`${baseUrl}/friendships/sendFriendRequest`, {
            receiverId: admin.id
        }, {
            headers: { Authorization: `Bearer ${admin.token}` }
        });
    } catch (err) {
        console.error('‚úÖ Esperado:', err.response?.data.message);
    }

    // 2Ô∏è‚É£ Enviar solicita√ß√£o sem receiverId
    try {
        console.log('\n2Ô∏è‚É£ Enviar solicita√ß√£o sem receiverId...');
        await axios.post(`${baseUrl}/friendships/sendFriendRequest`, {}, {
            headers: { Authorization: `Bearer ${admin.token}` }
        });
    } catch (err) {
        console.error('‚úÖ Esperado:', err.response?.data.message);
    }

    // 3Ô∏è‚É£ Repetir solicita√ß√£o de amizade j√° enviada
    try {
        console.log('\n3Ô∏è‚É£ Solicita√ß√£o duplicada...');
        await axios.post(`${baseUrl}/friendships/sendFriendRequest`, {
            receiverId: mod.id
        }, {
            headers: { Authorization: `Bearer ${admin.token}` }
        });
        console.log('‚Ü™Ô∏è Tentando enviar solicita√ß√£o duplicada...');
        await axios.post(`${baseUrl}/friendships/sendFriendRequest`, {
            receiverId: mod.id
        }, {
            headers: { Authorization: `Bearer ${admin.token}` }
        });
    } catch (err) {
        console.error('‚úÖ Esperado:', err.response?.data.message);
    }

    // 4Ô∏è‚É£ Responder solicita√ß√£o inexistente
    try {
        console.log('\n4Ô∏è‚É£ Responder solicita√ß√£o inexistente...');
        await axios.post(`${baseUrl}/friendships/respondToFriendRequest`, {
            requestId: 9999,
            action: 'accept'
        }, {
            headers: { Authorization: `Bearer ${mod.token}` }
        });
    } catch (err) {
        console.error('‚úÖ Esperado:', err.response?.data.message);
    }

    // 5Ô∏è‚É£ Responder com a√ß√£o inv√°lida
    try {
        console.log('\n5Ô∏è‚É£ A√ß√£o inv√°lida na resposta da solicita√ß√£o...');

        // Agora tenta buscar solicita√ß√µes pendentes
        const pending = await axios.get(`${baseUrl}/friendships/getPendingFriendRequests`, {
            headers: { Authorization: `Bearer ${mod.token}` }
        });

        const requests = pending.data.data.content;

        if (requests.length > 0) {
            const requestId = requests[0].id;
            await axios.post(`${baseUrl}/friendships/respondToFriendRequest`, {
                requestId,
                action: 'dance' // a√ß√£o inv√°lida proposital
            }, {
                headers: { Authorization: `Bearer ${mod.token}` }
            });
        } else {
            console.error('‚úÖ Esperado (a√ß√£o inv√°lida):');
        }
    } catch (err) {
        console.error('‚úÖ Esperado (a√ß√£o inv√°lida):', err.response?.data.message);
    }


    // 6Ô∏è‚É£ Buscar amigos sem token
    try {
        console.log('\n6Ô∏è‚É£ Buscar lista de amigos sem autentica√ß√£o...');
        await axios.get(`${baseUrl}/friendships/getFriends`);
    } catch (err) {
        console.error('‚úÖ Esperado:', err.response?.data.message);
    }

    // 7Ô∏è‚É£ Enviar solicita√ß√£o sem token
    try {
        console.log('\n7Ô∏è‚É£ Enviar solicita√ß√£o sem token...');
        await axios.post(`${baseUrl}/friendships/sendFriendRequest`, {
            receiverId: mod.id
        });
    } catch (err) {
        console.error('‚úÖ Esperado:', err.response?.data.message);
    }
}

runErrorTests();
